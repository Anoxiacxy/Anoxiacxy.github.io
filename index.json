[{"content":"","date":"7 July 2023","permalink":"/","section":"Anoxiacxy | Blog","summary":"","title":"Anoxiacxy | Blog"},{"content":"","date":"7 July 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 July 2023","permalink":"/categories/game/","section":"Categories","summary":"","title":"game"},{"content":"","date":"7 July 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"7 July 2023","permalink":"/tags/speaking/","section":"Tags","summary":"","title":"speaking"},{"content":"","date":"7 July 2023","permalink":"/series/speaking/","section":"Series","summary":"","title":"Speaking"},{"content":"","date":"7 July 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"7 July 2023","permalink":"/tags/toefl/","section":"Tags","summary":"","title":"toefl"},{"content":" I will share the process of my Toefl preparation. ","date":"7 July 2023","permalink":"/toefl/","section":"Toefl","summary":" I will share the process of my Toefl preparation. ","title":"Toefl"},{"content":" Preference 1 # Some people perfer to travel with their family. Some people perfer to travel alone. Which do you prefer?\nI perfer to travel alone.\nFor one thing, the schedule for the trip will be more flexible. When I travel by my self, it is more likely for me to choose when to go to the destination and when to leave.\nFor another, it allows me to choose the tourist attactions that I show interest in. While traveling with families, it is possible that we cannot reach an agreement about where to visit while it is possible for me to go to the places which I like.\nPreference 2 # There are two places to choose. One is the place that you have never visited with higher price. One is the place that you have visited before with lower price. Which one do you choose?\nI choose to go to the place which I have never visited with higher price.\nFor one thing, higher price brings better experiences. Higher price means superior service, extravagant accomodation and maganificent landscapes, which allows me to enjoy myself in a more comfortable way.\nFor another, there is a lack of freshness in the places that I have visited before. By contrast, the new place always enriches our life experience by providing a chance for me to taste unique local food, appreciate different scenery and expose to new culture.\nPreference 3 # There are two universites. One is prestigious but requires high tuition. One is not famous but offers scholarship. Which one do you choose?\nI prefer to choose the prestigious university which requires high tuition.\nFor one thing, it offers resources such as professional teachers, advanced science lab and modern library with abundant books, which allows me to achieve better academic performances.\nFor another, even though it requires high tuition, I can do some part-time johs such as working as teaching assistant in campus to cover part of the tuition.\nShould 1 # Do you agree or disagree with the following statement? Parents should decide career for their children.\nI disagree with the statement that parents should decide career for their children.\nFor one thing, the carreer might not be suitable for the children. It is likely that parents choose the career which is the best in their eyes without considering their children\u0026rsquo; interests and expectations. As a consequence, their children refuse to devote themselves to the career.\nFor another, it keeps their children from becoming independent. When parents decide career for their children, their kids will gradually rely on their parents. As a consequence, they tend to count on others whenever possible.\nShould 2 # Do you agree or disagree with the following statement? We should consult our parents when making decisions.\nI agree with the statement that we should consult our parents when making decisions.\nFor one thing, they can instruct us to make informed choices. Parents, who are more experienced, will take all possible factors into account and offer more feasible advices to help us to avoid making unnecessary mistakes.\nFor another, they can offer support for us such as mental support and financial support. For instance, when we plan to start a new business and need some money, our parents could provide good financial basis for us.\nShould 3 # Do you agree or disagree with the statement? Companies should allow employees to listen to music while working.\nI disagree with the statement that companies should allow employees to listen to music while working.\nFor one thing, it leads to lower working efficiency. Listening to music will distract employees\u0026rsquo; attention from what employees are focusing on. As a consequence, they are less able to accomplish our tasks on time.\nFor another, it has negative influence on the communication with others. When customers, colleagues and superiors try to start a conversation, the employees who are putting on their earphones will fail to respond to them promptly.\nConparison 1 # Do you agree or disagree with the following statement? Life now is better than before.\nI agree with the statement that life now is better than before.\nFor one thing, the transportation system is more complete. Different means of transportations are available such as subway, airplane and train, which takes less time for people to travel around.\nFor anther, the telecommunication tools are more advanced. Thanks to the advent of cell phone, it is posible for us to connect with others within several seconds when something urgent takes place.\nConparison 2 # Do you agree or disagree with the following statement? It is easier to be children than to be adults.\nI agree with the statement.\nFor one thing, children do not to be concerned about making money while it is necessary for adults to work hard and support their family, which is a heavy burden for them.\nFor another, children do not need to bother themselves about taking care of other family members while while adults are supposed to attend to all of the members in the family.\n","date":"7 July 2023","permalink":"/toefl/speaking/","section":"Toefl","summary":"Preference 1 # Some people perfer to travel with their family. Some people perfer to travel alone. Which do you prefer?\nI perfer to travel alone.\nFor one thing, the schedule for the trip will be more flexible.","title":"Toefl Speaking"},{"content":"","date":"13 June 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"10 December 2017","permalink":"/authors/anoxiacxy/","section":"Authors","summary":"","title":"anoxiacxy"},{"content":"","date":"10 December 2017","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"10 December 2017","permalink":"/tags/c++/","section":"Tags","summary":"","title":"c++"},{"content":"","date":"10 December 2017","permalink":"/tags/cli/","section":"Tags","summary":"","title":"cli"},{"content":" 总览 # 以上已经给出了有关此程序的效果图和流程图，虽然与实际程序稍有差异，但也八九不离十了。 关于此次贪吃蛇的制作，主要还是为了锻炼一下代码能力，也就相当于一个超级大模拟吧。 具体相当于要实现以下功能\n游戏实现 # 游戏的主体部分，即有关地图的加载，蛇身的移动，游戏结束的判定等等，地图由文件形式存储，可以自己DIY哈\n菜单界面 # 其实，这个玩意才最难搞，我写了个 Button 类，专门来处理有关这些菜单按钮的界面，然后疯狂调参，把按钮们放在一个合适的位置\n分数统计 # 为永久保存历史记录与排行榜，可以开一个文件，把战绩都保存在里面，然后每次更新文件里的内容即可\n操作设置 # 有的人习惯按转向来操作，即控制蛇的左拐和右拐，有的人习惯直接用上下左右控制蛇的方向，考虑到这一点，我添加了这个设置，并且为了永久保存，依旧将设置的结果保存在文件里面\n介绍 # 首先进入的便是主菜单，截图如下\n这个时候可以上下键选择，空格或者回车键确认，即可进入相应的选项，先直接开始游戏\n选择一个模式，选择的方法同上\n注意，游戏时请将输入法切换成英文，同时尽可能使用 WASD 而不是键盘右侧的上下左右，减少一些不明原因带来的延迟现象\n同时，空格键还有暂停的功能，再次点击即可继续游戏（本来打算再写个暂停的界面的，但因问没 (bo) 时 (zhu) 间 (lan) ，就放弃了）\n然后是游戏结束时的界面，依旧上下键选择，空格回车键确认，此界面与分数统计一起食用效果更佳\n历史最佳，即分数统计系统，可用上下键翻页，空格回车键返回上一级\n以上就是设置里面两种操作模式的选择，可以根据个人的喜好自行设置，关于那个动画的实现，我比较蠢。。。就直接一个一个字慢慢输出的，中文汉字还真不知道有没有什么好的输出办法。。。\n最后打个自己博客的广告，溜咯\n高级 # 自定义地图 # 在 data/mode/ 文件夹下有 4 个地图包，点开之后里面大概长这个样子，然后我们就可以愉快的修改地图啦，注意不要让蛇一开始就撞到墙上，地图的大小也必须是 15×20 的，虽然你也可以直接在源代码里面强行修改地图的大小，但那样的话可能会造成文字显示的位置不对等问题\n可以看到，你还可以在里面修改颜色，以及有关蛇的参数，注意蛇身的坐标必须按顺序给出，不然后果会很严重 另外，因为文件读入的识别功能不那么智能，所以请不要随意调整参数的位置与空格的格式。。。\n游戏下载 # 注意，此下载链接仅供娱乐，内含数据包及可执行程序，解压后无需安装即可开始游戏，但不包含源代码\n源代码 # 没写什么注释，只把关于 windows API 里面自己不熟悉的函数写了下注释，大家将就看下\n//Anoxiacxy #include \u0026lt;windows.h\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;conio.h\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;ctime\u0026gt; #define W 20 #define H 15 using namespace std; //-----------------------------隐藏光标 void HideCursor(){ HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE); CONSOLE_CURSOR_INFO CursorInfo; GetConsoleCursorInfo(handle,\u0026amp;CursorInfo);//获取控制台光标信息 CursorInfo.bVisible=false;//隐藏控制台光标 SetConsoleCursorInfo(handle,\u0026amp;CursorInfo);//设置控制台光标状态 } void SetWindowSize(int cols, int lines); void Goto(int x, int y); void SetColor(int colorID); void SetWindowSize(int cols, int lines){//设置窗口大小 system(\u0026#34;title GreedySnake\u0026#34;);//设置窗口标题 char cmd[30]; sprintf(cmd, \u0026#34;mode con cols=%d lines=%d\u0026#34;, cols * 2, lines);//一个图形■占两个字符，故宽度乘以2 system(cmd);//设置窗口宽度和高度 } void Goto(int x,int y){//设置光标位置 COORD position; position.X = x * 2; position.Y = y; SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), position); } void SetColor(int colorID){//设置文本颜色 SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), colorID); } //---------------------------------------------// const string CLEAR=\u0026#34; \u0026#34;; class Point{ // Point类 表示控制台里面的一个坐标 private: int x,y; public: Point(int x = 0,int y = 0):x(x), y(y){} void Set(int x,int y); //将坐标设为-- void Print(string Object); //在该坐标输出一个字符 void Print(string Object, int color); //在该坐标输出一个带颜色的字符 void Clear(); //清空当前坐标的字符 int Getx(){return this-\u0026gt;x;} int Gety(){return this-\u0026gt;y;} bool operator == (const Point\u0026amp; point) {return point.x == this-\u0026gt;x \u0026amp;\u0026amp; point.y == this-\u0026gt;y;} }; void Point::Print(string Object, int color){ SetColor(color); Goto(x, y); cout \u0026lt;\u0026lt; Object; } void Point::Print(string Object){ Goto(x, y); cout \u0026lt;\u0026lt; Object; } void Point::Clear(){ Point::Print(CLEAR); } void Point::Set(int x, int y){ this-\u0026gt;x = x; this-\u0026gt;y = y; } //---------------------------------------------// #define STARTGAME 0 #define RANKING 1 #define SETTING 2 #define ABOUT 3 #define EXIT 4 #define MAINMENU_TOT 5 #define EASY 0 #define NORMAL 1 #define HARD 2 #define UNBELIEVABLE 3 #define MODEMENU_TOT 4 #define PLAY_AGAIN 0 #define SHOW_RANK 1 #define BACK_TO_MODEMENU 2 #define BACK_TO_MAINMENU 3 #define GAMEOVERMENU_TOT 4 class Button{ public: Button(){} void Set(string s, Point p, int c1, int c2);\t//设置当前按钮显示字符，位置，未选中时颜色，选中时颜色 void Print(); //输出 bool slect; //是否选中 Point pos;\tprivate: string discribe; int color[2]; //0---unslected 1---slected }; void Button::Set(string s, Point p, int c1, int c2){ discribe = s; pos = p; color[0] = c1; color[1] = c2; slect = 0; } void Button::Print(){ SetColor(color[slect]); Goto(pos.Getx(), pos.Gety()); cout \u0026lt;\u0026lt; discribe; } //---------------------------------------------// #define EMPTY 0 #define WALL 1 #define SNAKE 2 #define FOOD 3 #define ELEMENT_TOT 4 #define ABOUT_TOT 4 void Initializatoin();//初始化，读入数据 string element[ELEMENT_TOT];//元素符号 Button about_button[ABOUT_TOT]; int MainMenu();\t//主菜单--返回选项 int ModeMenu();\t//模式选择--返回选项 int GameOverMenu(int); //游戏结束--传入得分--返回选项 int SetMenu(); //操作设置--返回选项 int mp[W][H]; //地图 int empty_num;\t//地图中空位的个数 void NewFood(int color){ //在地图的剩余空位中随机生成一个食物 srand(time(NULL)); int pos = rand() % empty_num + 1; for(int j = 0; j \u0026lt; H; j++) for(int i = 0; i \u0026lt; W; i++){ if(mp[i][j] == EMPTY) pos--; if(pos == 0 \u0026amp;\u0026amp; mp[i][j] == EMPTY){ mp[i][j] = FOOD; Point(i, j).Print(element[FOOD], color); empty_num--; return; } }\t} struct Snake{\tPoint body[W * H]; //身体--由一个个点组成 int head, tail;\t//头-尾 int speed;\t//速度 int dicx, dicy; //方向 int color; Snake(){} void Set(Point snk[], int len, int _color, int _speed, int x, int y) {\t//一个初始化函数 head = len; tail = 1; color = _color; speed = _speed; dicx = x; dicy = y; for(int i = 1; i \u0026lt;= len; i++){ body[i] = snk[i]; body[i].Print(element[SNAKE], color); mp[body[i].Getx()][body[i].Gety()] = SNAKE;\t} } int move() { //控制蛇向当前方向移动一格--返回蛇头遇到的物品 int hx = body[head].Getx() + dicx; int hy = body[head].Gety() + dicy; int tmp = mp[hx][hy]; if(mp[hx][hy] == WALL || mp[hx][hy] == SNAKE) return tmp; if(mp[hx][hy] != FOOD){ int tx = body[tail].Getx(); int ty = body[tail].Gety(); body[tail].Clear(); mp[tx][ty] = EMPTY; tail = (tail + 1) % (W * H); } mp[hx][hy] = SNAKE; head = (head + 1) % (W * H); body[head].Set(hx, hy); body[head].Print(element[SNAKE], color); return tmp; } void turn_left() {\t//左转 dicx *= -1; swap(dicx, dicy); } void turn_right() {\t//右转 dicy *= -1; swap(dicx, dicy); } }; #define OPT_L_R 0 //ad左右拐弯 #define OPT_U_D_L_R 1//直接转向xx #define OPT_TOT 2 #define DISCRIBE_LEN 100 //选项描述的最大长度（其实用不着这么多） int set_opt=1; void DealOpt(char press, Snake\u0026amp; snake){\t//处理游戏时的按键操作，强烈建议仅使用 WASD if(press == \u0026#39; \u0026#39;)while(getch() != \u0026#39; \u0026#39;); else if(set_opt == OPT_L_R) switch(press){ case 75://left case \u0026#39;A\u0026#39;: case \u0026#39;a\u0026#39;: snake.turn_left(); break; case 77://right case \u0026#39;D\u0026#39;: case \u0026#39;d\u0026#39;: snake.turn_right(); break; default:break; } else if(set_opt == OPT_U_D_L_R) switch(press){ case \u0026#39;A\u0026#39;: case \u0026#39;a\u0026#39;: case 75 : if(snake.dicx == 0){ if(snake.dicy == 1) snake.turn_right(); else snake.turn_left(); }break; case \u0026#39;D\u0026#39;: case \u0026#39;d\u0026#39;: case 77 : if(snake.dicx == 0){ if(snake.dicy == -1) snake.turn_right(); else snake.turn_left(); }break; case \u0026#39;W\u0026#39;: case \u0026#39;w\u0026#39;: case 72 : if(snake.dicy == 0){ if(snake.dicx == -1) snake.turn_right(); else snake.turn_left(); }break; case \u0026#39;S\u0026#39;: case \u0026#39;s\u0026#39;: case 80 : if(snake.dicy == 0){ if(snake.dicx == 1) snake.turn_right(); else snake.turn_left(); }break; } } int Play(int Mode){\t//游戏的过程 ifstream fin; string tmmp; switch(Mode){\t//打开选择的模式地图 case EASY: fin.open(\u0026#34;data//mode//easy.mode\u0026#34;);\tbreak; case NORMAL: fin.open(\u0026#34;data//mode//normal.mode\u0026#34;);\tbreak; case HARD:\tfin.open(\u0026#34;data//mode//hard.mode\u0026#34;);\tbreak; case UNBELIEVABLE:\tfin.open(\u0026#34;data//mode//unbelievable.mode\u0026#34;);\tbreak; default:return 0; } if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout \u0026lt;\u0026lt; \u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } empty_num=0;\t//载入地图 int wall_color, snake_color, food_color; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; wall_color \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; snake_color \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; food_color \u0026gt;\u0026gt; tmmp; for(int j = 0; j \u0026lt; H; j++) for(int i = 0; i \u0026lt; W; i++) { fin \u0026gt;\u0026gt; mp[i][j]; if(mp[i][j] == EMPTY) empty_num++; Point(i, j).Print(element[mp[i][j]], wall_color); } int len; Point tmp[W*H]; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; len \u0026gt;\u0026gt; tmmp; for(int i = 1; i \u0026lt;= len; i++){ empty_num--; int x,y; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; x \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; y \u0026gt;\u0026gt; tmmp; tmp[i].Set(x, y); } int dicx, dicy, speed; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; dicx \u0026gt;\u0026gt; dicy; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; speed; fin.close(); Snake snake; snake.Set(tmp, len, snake_color, speed, dicx, dicy); NewFood(food_color); int score = 0; bool live = true; while(live) {\t//游戏循环--当蛇活着时 if(kbhit()) { char press=getch(); DealOpt(press, snake); } switch(snake.move()){ case SNAKE: case WALL: live=false; break; case FOOD: NewFood(food_color); score++; break; default:break; } Sleep(1000 / snake.speed); } return score; } #define SHOW_NUM 5 #define SPEED 30 int best_score[10086]; void UpdataScore(int score){\t//游戏结束后更新分数，并及时记录在文件中 best_score[++best_score[0]] = score; for(int k = best_score[0]; best_score[k] \u0026gt; best_score[k-1] \u0026amp;\u0026amp; k \u0026gt; 1; k--) swap(best_score[k], best_score[k-1]); while(best_score[0] \u0026gt; 10000) best_score[0]--; ofstream fout; fout.open(\u0026#34;data//best.score\u0026#34;); for(int i = 0; i \u0026lt;= best_score[0]; i++) fout \u0026lt;\u0026lt; best_score[i] \u0026lt;\u0026lt; endl; fout.close(); } void ShowScore(int now){\t//打印当前页的分数 system(\u0026#34;cls\u0026#34;); for(int i = 1; i \u0026lt;= SHOW_NUM \u0026amp;\u0026amp; (now - 1) * SHOW_NUM + i \u0026lt;= best_score[0]; i++){ Goto(8, i \u0026lt;\u0026lt; 1 | 1); Sleep(SPEED); printf(\u0026#34;%d\u0026#34;,(now - 1) * SHOW_NUM + i); Goto(10,i \u0026lt;\u0026lt; 1 | 1); printf(\u0026#34;%4d\u0026#34;, best_score[(now - 1) * SHOW_NUM + i]); } } void Setting() {\t//就是操作的设置啦--同样及时记录 set_opt = SetMenu(); ofstream fout; fout.open(\u0026#34;data//others//setting.txt\u0026#34;); fout \u0026lt;\u0026lt; set_opt \u0026lt;\u0026lt; endl; fout.close(); } void Ranking(){\t//此函数可以实现分数的翻页功能 int cnt = (best_score[0] + SHOW_NUM - 1) / SHOW_NUM; int now = 1; ShowScore(now); while(true){ bool turn_out = false; switch(getch()){ case \u0026#39;w\u0026#39;: case 72 ://up if(now != 1){ now--; ShowScore(now); } break; case \u0026#39;s\u0026#39;: case 80 ://down if(now \u0026lt; cnt){ now++; ShowScore(now); } break; case \u0026#39; \u0026#39;: case 13 ://enter turn_out = true; default:break; } if(turn_out)break; } } void StartGame(){\t//开始游戏的选项 while(true){ system(\u0026#34;cls\u0026#34;); int mode = ModeMenu(); bool changemode = false; while(true){ int score = Play(mode); UpdataScore(score); while(true){ bool turn_out = false; switch(GameOverMenu(score)){ case PLAY_AGAIN:\tturn_out = true; break; case SHOW_RANK:\tRanking(); break; case BACK_TO_MAINMENU:\treturn; case BACK_TO_MODEMENU:\tturn_out=true; changemode=true; break;\t} if(turn_out)break; } if(changemode == true)break; } } } void About() {\t//关于页面--只能在源代码里面修改 不属于外面的data文件 system(\u0026#34;cls\u0026#34;); for (int slect = 0; slect \u0026lt; ABOUT_TOT; slect++) about_button[slect].Print(); while(true){ switch(getch()){ case \u0026#39; \u0026#39;: case 13 ://enter return; default :break; } } } int main(){ SetWindowSize(W, H);\t//设置窗口大小 HideCursor();\t//隐藏光标 //StartAnimation();\t//开始动画--这个也懒得写了 Initializatoin();\t//初始化 while(true){ switch(MainMenu()){ case STARTGAME:\tStartGame();break; case RANKING:\tRanking();break; case SETTING:\tSetting();break; case ABOUT:\tAbout();break; case EXIT:\texit(0); default: break; } } return 0; } void Initializatoin(){\t//初始化--读入一大堆文件之类的 ifstream fin; string tmmp; fin.open(\u0026#34;data//others//element.txt\u0026#34;);//读入元素符号 if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout \u0026lt;\u0026lt; \u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } element[0]=\u0026#34; \u0026#34;; for(int i = WALL; i \u0026lt; ELEMENT_TOT; i++) fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; element[i]; fin.close(); fin.open(\u0026#34;data//best.score\u0026#34;);\t//读入历史分数 if(fin.is_open()){ fin \u0026gt;\u0026gt; best_score[0]; for(int i = 1; i \u0026lt;= best_score[0]; i++) fin \u0026gt;\u0026gt; best_score[i]; } fin.close(); fin.open(\u0026#34;data//others//setting.txt\u0026#34;); if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout \u0026lt;\u0026lt; \u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } fin \u0026gt;\u0026gt; set_opt; fin.close(); string s; int c1, c2, xpos, ypos;\t//防伪--广告 s = \u0026#34;code by\u0026#34;; c1 = c2 = 8; xpos = 5, ypos = 6; about_button[0].Set(s, Point(xpos,ypos), c1, c2); s = \u0026#34;anoxiacxy\u0026#34;; c1 = c2 = 15; xpos = 10, ypos = 6; about_button[1].Set(s, Point(xpos,ypos), c1, c2); s = \u0026#34;anoxiacxy.github.io\u0026#34;; c1 = c2 = 8; xpos = 5, ypos = 7; about_button[2].Set(s, Point(xpos,ypos), c1, c2); } int MainMenu(){ Button main_button[MAINMENU_TOT];//主菜单按钮 ifstream fin; string tmmp; fin.open(\u0026#34;data//button//mainmenu.button\u0026#34;);//载入 if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout \u0026lt;\u0026lt; \u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } for(int slect = STARTGAME; slect \u0026lt; MAINMENU_TOT; slect++){ string s; int c1, c2, xpos, ypos; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; s \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; xpos \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; ypos \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; c1 \u0026gt;\u0026gt; c2; main_button[slect].Set(s, Point(xpos,ypos), c1, c2); } fin.close(); system(\u0026#34;cls\u0026#34;); for(int slect = STARTGAME; slect \u0026lt; MAINMENU_TOT; slect++){ main_button[slect].slect = false; main_button[slect].Print(); } int slect = STARTGAME; main_button[slect].slect = true; main_button[slect].Print(); while(true){ switch(getch()){ case \u0026#39;W\u0026#39;: case \u0026#39;w\u0026#39;: case 72://up main_button[slect].slect = false; main_button[slect].Print(); slect = (slect - 1 + MAINMENU_TOT) % MAINMENU_TOT; main_button[slect].slect = true; main_button[slect].Print(); break; case \u0026#39;S\u0026#39;: case \u0026#39;s\u0026#39;: case 80://down main_button[slect].slect = false; main_button[slect].Print(); slect=(slect+1)%MAINMENU_TOT; main_button[slect].slect = true; main_button[slect].Print(); break; case \u0026#39; \u0026#39;: case 13://enter return slect; default:break; } } } int ModeMenu(){ Button mode_button[MODEMENU_TOT];//模式选择按钮 ifstream fin; string tmmp; fin.open(\u0026#34;data//button//modemenu.button\u0026#34;);//载入 if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout\u0026lt;\u0026lt;\u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } for(int slect=EASY;slect\u0026lt;MODEMENU_TOT;slect++){ string s;int c1,c2,xpos,ypos; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; s \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; xpos \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; ypos \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; c1 \u0026gt;\u0026gt; c2; mode_button[slect].Set(s, Point(xpos,ypos), c1, c2); } fin.close(); system(\u0026#34;cls\u0026#34;); for(int slect = EASY; slect \u0026lt; MODEMENU_TOT; slect++){ mode_button[slect].slect = false; mode_button[slect].Print(); } int slect = EASY; mode_button[slect].slect = true; mode_button[slect].Print(); while(true){ switch(getch()){ case \u0026#39;W\u0026#39;: case \u0026#39;w\u0026#39;: case 72://up mode_button[slect].slect = false; mode_button[slect].Print(); slect=(slect-1+MODEMENU_TOT)%MODEMENU_TOT; mode_button[slect].slect = true; mode_button[slect].Print(); break; case \u0026#39;S\u0026#39;: case \u0026#39;s\u0026#39;: case 80://down mode_button[slect].slect = false; mode_button[slect].Print(); slect=(slect+1)%MODEMENU_TOT; mode_button[slect].slect = true; mode_button[slect].Print(); break; case \u0026#39; \u0026#39;: case 13://enter return slect; default:break; } }\t} int GameOverMenu(int score){ Button gameover_button[GAMEOVERMENU_TOT];\t//游戏结束的按钮 ifstream fin; string tmmp; fin.open(\u0026#34;data//button//gameovermenu.button\u0026#34;);//载入 if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout\u0026lt;\u0026lt;\u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } for(int slect = PLAY_AGAIN; slect \u0026lt; GAMEOVERMENU_TOT; slect++){ string s;int c1, c2, xpos, ypos; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; s \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; xpos \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; ypos \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; c1 \u0026gt;\u0026gt; c2; gameover_button[slect].Set(s, Point(xpos,ypos), c1, c2); } fin.close();\tsystem(\u0026#34;cls\u0026#34;); SetColor(15); Goto(8, 3); printf(\u0026#34;分数%4d\u0026#34;, score); for(int slect = PLAY_AGAIN; slect \u0026lt; GAMEOVERMENU_TOT; slect++){ gameover_button[slect].slect = false; gameover_button[slect].Print(); } int slect = PLAY_AGAIN; gameover_button[slect].slect = true; gameover_button[slect].Print(); while(true){ switch(getch()){ case \u0026#39;W\u0026#39;: case \u0026#39;w\u0026#39;: case 72 ://up gameover_button[slect].slect = false; gameover_button[slect].Print(); slect = (slect - 1 + GAMEOVERMENU_TOT) % GAMEOVERMENU_TOT; gameover_button[slect].slect = true; gameover_button[slect].Print(); break; case \u0026#39;S\u0026#39;: case \u0026#39;s\u0026#39;: case 80 ://down gameover_button[slect].slect = false; gameover_button[slect].Print(); slect = (slect + 1) % GAMEOVERMENU_TOT; gameover_button[slect].slect = true; gameover_button[slect].Print(); break; case \u0026#39; \u0026#39;: case 13 ://enter return slect; default:break; } }\t} int SetMenu(){ Button set_button[OPT_TOT]; //设置的按钮 ifstream fin; string tmmp; fin.open(\u0026#34;data//button//setmenu.button\u0026#34;);//载入 if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout\u0026lt;\u0026lt;\u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } for(int slect = OPT_L_R; slect \u0026lt; OPT_TOT; slect++){ string s; int c1, c2, xpos, ypos; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; s \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; xpos \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; ypos \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; c1 \u0026gt;\u0026gt; c2; set_button[slect].Set(s, Point(xpos,ypos), c1, c2); } fin.close(); system(\u0026#34;cls\u0026#34;); for(int slect = OPT_L_R; slect \u0026lt; OPT_TOT; slect++){ set_button[slect].slect = false; set_button[slect].Print(); } int slect = set_opt; set_button[slect].slect = true; set_button[slect].Print(); Button discribe[OPT_TOT][DISCRIBE_LEN]; int len[OPT_TOT]; fin.open(\u0026#34;data//others//discribe.txt\u0026#34;); if(!fin.is_open()){ system(\u0026#34;cls\u0026#34;); cout\u0026lt;\u0026lt;\u0026#34;数据丢失，请检查数据文件后重新启动游戏\u0026#34;; exit(0); } for (int i = OPT_L_R; i \u0026lt; OPT_TOT; i++) { fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; len[i]; for (int j = 1; j \u0026lt;= len[i]; j++) { string s; int c1, c2, xpos, ypos; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; s \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; xpos \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; ypos \u0026gt;\u0026gt; tmmp; fin \u0026gt;\u0026gt; tmmp \u0026gt;\u0026gt; c1 \u0026gt;\u0026gt; c2; discribe[i][j].Set(s, Point(xpos,ypos), c1, c2); } } fin.close(); for(int i = 1; i \u0026lt;= len[slect]; i++){ discribe[slect][i].Print(); Sleep(SPEED); } while(true){ switch(getch()){ case \u0026#39;A\u0026#39;: case \u0026#39;a\u0026#39;: case 75 ://left set_button[slect].slect = false; set_button[slect].Print(); for(int i=1;i\u0026lt;=len[slect];i++) discribe[slect][i].pos.Clear(); slect = (slect - 1 + OPT_TOT) % OPT_TOT; set_button[slect].slect = true; set_button[slect].Print(); for(int i=1;i\u0026lt;=len[slect];i++){ discribe[slect][i].Print(); Sleep(SPEED); } break; case \u0026#39;D\u0026#39;: case \u0026#39;d\u0026#39;: case 77 ://right set_button[slect].slect = false; set_button[slect].Print(); for(int i=1;i\u0026lt;=len[slect];i++) discribe[slect][i].pos.Clear(); slect=(slect + 1) % OPT_TOT; set_button[slect].slect = true; set_button[slect].Print(); for(int i=1;i\u0026lt;=len[slect];i++){ discribe[slect][i].Print(); Sleep(SPEED); } break; case \u0026#39; \u0026#39;: case 13 ://enter return slect; default:break; } } } ","date":"10 December 2017","permalink":"/projects/greedysnake/","section":"Projects","summary":"总览 # 以上已经给出了有关此程序的效果图和流程图，虽然与实际程序稍有差异，但也八九不离十了。 关于此次贪吃蛇的制作，主要还是为了锻炼一下代码能力，也就相当于一个超级大模拟吧。 具体相当于要实现以下功能\n游戏实现 # 游戏的主体部分，即有关地图的加载，蛇身的移动，游戏结束的判定等等，地图由文件形式存储，可以自己DIY哈\n菜单界面 # 其实，这个玩意才最难搞，我写了个 Button 类，专门来处理有关这些菜单按钮的界面，然后疯狂调参，把按钮们放在一个合适的位置\n分数统计 # 为永久保存历史记录与排行榜，可以开一个文件，把战绩都保存在里面，然后每次更新文件里的内容即可\n操作设置 # 有的人习惯按转向来操作，即控制蛇的左拐和右拐，有的人习惯直接用上下左右控制蛇的方向，考虑到这一点，我添加了这个设置，并且为了永久保存，依旧将设置的结果保存在文件里面\n介绍 # 首先进入的便是主菜单，截图如下\n这个时候可以上下键选择，空格或者回车键确认，即可进入相应的选项，先直接开始游戏\n选择一个模式，选择的方法同上\n注意，游戏时请将输入法切换成英文，同时尽可能使用 WASD 而不是键盘右侧的上下左右，减少一些不明原因带来的延迟现象\n同时，空格键还有暂停的功能，再次点击即可继续游戏（本来打算再写个暂停的界面的，但因问没 (bo) 时 (zhu) 间 (lan) ，就放弃了）","title":"CLI Greedy Snake"},{"content":" Simple, yet powerful. Learn how to use Blowfish and its features. ","date":"10 December 2017","permalink":"/projects/","section":"Projects","summary":" Simple, yet powerful. Learn how to use Blowfish and its features. ","title":"Projects"},{"content":"","date":"10 December 2017","permalink":"/authors/xueyang/","section":"Authors","summary":"","title":"xueyang"}]